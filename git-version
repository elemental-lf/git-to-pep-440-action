#!/bin/bash

set -uo pipefail

declare -r GITHUB_WORKSPACE=${GITHUB_WORKSPACE:-/github/workspace}

if [[ ! -d ${GITHUB_WORKSPACE} ]]; then
  cat >&2 <<EOF
${GITHUB_WORKSPACE} is missing or is not a directory.
Run this script as a GitHub Action after checking out the repository with
actions/checkout. Set fetch-depth to zero so that all the context necessary
for generating the version string is present.
EOF
  exit 1
fi

if [[ ! ${GITHUB_REF} ]]; then
  cat >&2 <<EOF
Environment variable GITHUB_REF is not set.
Run this script as a GitHub Action after checking out the repository with
actions/checkout. Set fetch-depth to zero so that all the context necessary
for generating the version string is present.
EOF
  exit 1
fi

if [ $# != 1 ]; then
  echo "usage: $0 <tag-prefix>"
  exit 1
fi

declare -r TAG_PREFIX="$1"

touch /tmp/.time-reference

git config --global --add safe.directory "${GITHUB_WORKSPACE}"
cd "${GITHUB_WORKSPACE}"

git_ref_short="$(git rev-parse --short HEAD)"
echo "::debug::Setting git-ref-short to ${git_ref_short}"
echo "git-ref-short=${git_ref_short}" >>${GITHUB_OUTPUT}

build_date="$(date -r /tmp/.time-reference -u +'%Y-%m-%dT%H:%M:%SZ')"
echo "::debug::Setting build-date to ${build_date}"
echo "build-date=${build_date}" >>${GITHUB_OUTPUT}

if [[ ${GITHUB_REF} =~ ^refs/heads/ ]]; then
  git_branch="${GITHUB_REF#refs/heads/}"
  echo "::debug::Setting git-branch to ${git_branch}"
  echo "git-branch=${git_branch}" >>${GITHUB_OUTPUT}
else
  echo "::debug::Git reference does not point to a branch."
  echo "git-branch=" >>${GITHUB_OUTPUT}
fi

if [[ ${GITHUB_REF} =~ ^refs/tags/ ]]; then
  git_tag="${GITHUB_REF#refs/tags/}"
  echo "::debug::Setting git-tag to ${git_tag}"
  echo "git-tag=${git_tag}" >>${GITHUB_OUTPUT}
else
  echo "::debug::Git reference does not point to a tag."
  echo "git-tag=" >>${GITHUB_OUTPUT}
fi

git_describe="$(git describe --long --tags --match "$TAG_PREFIX"'[0-9]*.[0-9]*.[0-9]*' --dirty=-d$(date -r /tmp/.time-reference +'%Y%m%d%H%M%S') 2>/dev/null)"
if [[ ! $git_describe ]]; then
  echo "::debug::Unable to determine version information from git describe. Probably the initial tag is missing."
	cat >>${GITHUB_OUTPUT} <<-EOF
		version=
		image-tag=
		release=false
	EOF
  exit 0
fi

# git describe example outputs:
# v0.1.0-0-g43ecd2f-d20180802160059
# v0.1.0-3-g43ec123-d20180802160059
# v0.1.0-0-g43ecd2f
# v0.1.0-3-g43ec123

if [[ $git_describe =~ ^${TAG_PREFIX}?(.+)-([0-9]+)-(g[0-9a-f]+)(-(d.+))?$ ]]; then
  git_describe_tag=${BASH_REMATCH[1]}
  git_describe_distance=${BASH_REMATCH[2]}
  git_describe_commit=${BASH_REMATCH[3]}
  git_describe_dirty=${BASH_REMATCH[5]}
else
  echo "::debug::Unable to parse output from git describe."
  echo "::debug::git describe returned: ${git_describe}"
	cat >>${GITHUB_OUTPUT} <<-EOF
		version=
		image-tag=
		release=false
	EOF
  exit 0
fi

# Versioning scheme based on: https://www.python.org/dev/peps/pep-0440/, https://pypi.org/project/setuptools_scm/

if [[ $git_describe_distance == 0 ]]; then
  if [[ $git_describe_dirty ]]; then
		cat >>${GITHUB_OUTPUT} <<-EOF
			version=${git_describe_tag}+${git_describe_dirty}
			image-tag=${git_describe_tag}_${git_describe_dirty}
			release=false
		EOF
  else
		cat >>${GITHUB_OUTPUT} <<-EOF
			version=${git_describe_tag}
			image-tag=${git_describe_tag}
			release=true
		EOF
  fi
else
  # Increment last version number by one
  git_describe_tag_array=(${git_describe_tag//./ })
  git_describe_tag_array[2]=$((git_describe_tag_array[2] + 1))
  git_describe_tag="${git_describe_tag_array[0]}.${git_describe_tag_array[1]}.${git_describe_tag_array[2]}"

  if [[ $git_describe_dirty ]]; then
    cat >>${GITHUB_OUTPUT} <<-EOF
			version=${git_describe_tag}.dev${git_describe_distance}+${git_describe_commit}.${git_describe_dirty}
			image-tag=${git_describe_tag}.dev${git_describe_distance}_${git_describe_commit}.${git_describe_dirty}
			release=false
		EOF
  else
    cat >>${GITHUB_OUTPUT} <<-EOF
			version=${git_describe_tag}.dev${git_describe_distance}+${git_describe_commit}
			image-tag=${git_describe_tag}.dev${git_describe_distance}_${git_describe_commit}
			release=false
		EOF
  fi
fi
exit 0
